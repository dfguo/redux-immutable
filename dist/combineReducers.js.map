{"version":3,"sources":["combineReducers.js"],"names":[],"mappings":";;;;;;AAEA;;AAKA;;;;;;;;kBAEe,UAAC,QAAD,EAAmB,WAAnB,EAAgE;AAC3E,QAAI,oBAAJ;;AAEA,kBAAc,OAAO,IAAP,CAAY,QAAZ,CAAd;;AAEA,WAAO,UAAC,UAAD,EAAyB,MAAzB,EAAuD;AAC1D,YAAI,eAAe,SAAnB,EAA8B;AAC5B,yBAAa,oBAAU,GAAV,EAAb;AACD;;AAED,YAAI,eAAe,EAAE,sBAAsB,WAAxB,CAAnB,EAAyD;AACrD,yBAAa,IAAI,WAAJ,CAAgB,UAAhB,CAAb;AACH;;;AAGD,YAAI,QAAQ,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;;AAEvC,gBAAI,uBAAJ;;AAEA,6BAAiB,wDAAwC,UAAxC,EAAoD,QAApD,EAA8D,MAA9D,CAAjB;;AAEA,gBAAI,cAAJ,EAAoB;;AAEhB,wBAAQ,KAAR,CAAc,cAAd;;AAEH;AACJ;;AAED,eAAO,WACF,aADE,CACY,UAAC,cAAD,EAAoB;AAC/B,wBAAY,OAAZ,CAAoB,UAAC,WAAD,EAAiB;AACjC,oBAAI,2BAAJ;oBACI,wBADJ;oBAEI,gBAFJ;;AAIA,0BAAU,SAAS,WAAT,CAAV;;AAEA,qCAAqB,eAAe,GAAf,CAAmB,WAAnB,CAArB;;AAEA,kCAAkB,QAAQ,kBAAR,EAA4B,MAA5B,CAAlB;;AAEA,kDAAkB,eAAlB,EAAmC,WAAnC,EAAgD,MAAhD;;AAEA,+BAAe,GAAf,CAAmB,WAAnB,EAAgC,eAAhC;AACH,aAdD;AAeH,SAjBE,CAAP;AAkBH,KAzCD;AA0CH,C","file":"combineReducers.js","sourcesContent":["/* eslint-disable lodash3/prefer-lodash-method */\n\nimport {\n    getUnexpectedInvocationParameterMessage,\n    validateNextState\n} from './utilities';\n\nimport Immutable from 'immutable';\n\nexport default (reducers: Object, RecordClass: ?Immutable.Record): Function => {\n    let reducerKeys;\n\n    reducerKeys = Object.keys(reducers);\n\n    return (inputState: ?Immutable, action: Object): Immutable => {\n        if (inputState === undefined) {\n          inputState = Immutable.Map();\n        }\n\n        if (RecordClass && !(inputState instanceof RecordClass)) {\n            inputState = new RecordClass(inputState)\n        }\n\n        /* eslint-disable no-process-env */\n        if (process.env.NODE_ENV !== 'production') {\n        /* eslint-enable no-process-env */\n            let warningMessage;\n\n            warningMessage = getUnexpectedInvocationParameterMessage(inputState, reducers, action);\n\n            if (warningMessage) {\n                /* eslint-disable no-console */\n                console.error(warningMessage);\n                /* eslint-enable no-console */\n            }\n        }\n\n        return inputState\n            .withMutations((temporaryState) => {\n                reducerKeys.forEach((reducerName) => {\n                    let currentDomainState,\n                        nextDomainState,\n                        reducer;\n\n                    reducer = reducers[reducerName];\n\n                    currentDomainState = temporaryState.get(reducerName);\n\n                    nextDomainState = reducer(currentDomainState, action);\n\n                    validateNextState(nextDomainState, reducerName, action);\n\n                    temporaryState.set(reducerName, nextDomainState);\n                });\n            });\n    };\n};\n"]}